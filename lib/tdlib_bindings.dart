// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Creates a new instance of TDLib.
  /// \return Pointer to the created instance of TDLib.
  ffi.Pointer<ffi.Int32> td_json_client_create() {
    return _td_json_client_create();
  }

  late final _td_json_client_create_ptr =
      _lookup<ffi.NativeFunction<_c_td_json_client_create>>(
          'td_json_client_create');
  late final _dart_td_json_client_create _td_json_client_create =
      _td_json_client_create_ptr.asFunction<_dart_td_json_client_create>();

  /// Sends request to the TDLib client. May be called from any thread.
  /// \param[in] client The client.
  /// \param[in] request JSON-serialized null-terminated request to TDLib.
  int td_json_client_send(
    ffi.Pointer<ffi.Void> client,
    ffi.Pointer<ffi.Int8> request,
  ) {
    return _td_json_client_send(
      client,
      request,
    );
  }

  late final _td_json_client_send_ptr =
      _lookup<ffi.NativeFunction<_c_td_json_client_send>>(
          'td_json_client_send');
  late final _dart_td_json_client_send _td_json_client_send =
      _td_json_client_send_ptr.asFunction<_dart_td_json_client_send>();

  /// Receives incoming updates and request responses from the TDLib client. May be called from any thread, but
  /// must not be called simultaneously from two different threads.
  /// Returned pointer will be deallocated by TDLib during next call to td_json_client_receive or td_json_client_execute
  /// in the same thread, so it can't be used after that.
  /// \param[in] client The client.
  /// \param[in] timeout The maximum number of seconds allowed for this function to wait for new data.
  /// \return JSON-serialized null-terminated incoming update or request response. May be NULL if the timeout expires.
  ffi.Pointer<ffi.Int32> td_json_client_receive(
    ffi.Pointer<ffi.Void> client,
    double timeout,
  ) {
    return _td_json_client_receive(
      client,
      timeout,
    );
  }

  late final _td_json_client_receive_ptr =
      _lookup<ffi.NativeFunction<_c_td_json_client_receive>>(
          'td_json_client_receive');
  late final _dart_td_json_client_receive _td_json_client_receive =
      _td_json_client_receive_ptr.asFunction<_dart_td_json_client_receive>();

  /// Synchronously executes TDLib request. May be called from any thread.
  /// Only a few requests can be executed synchronously.
  /// Returned pointer will be deallocated by TDLib during next call to td_json_client_receive or td_json_client_execute
  /// in the same thread, so it can't be used after that.
  /// \param[in] client The client. Currently ignored for all requests, so NULL can be passed.
  /// \param[in] request JSON-serialized null-terminated request to TDLib.
  /// \return JSON-serialized null-terminated request response.
  ffi.Pointer<ffi.Int32> td_json_client_execute(
    ffi.Pointer<ffi.Void> client,
    ffi.Pointer<ffi.Int8> request,
  ) {
    return _td_json_client_execute(
      client,
      request,
    );
  }

  late final _td_json_client_execute_ptr =
      _lookup<ffi.NativeFunction<_c_td_json_client_execute>>(
          'td_json_client_execute');
  late final _dart_td_json_client_execute _td_json_client_execute =
      _td_json_client_execute_ptr.asFunction<_dart_td_json_client_execute>();

  /// Destroys the TDLib client instance. After this is called the client instance must not be used anymore.
  /// \param[in] client The client.
  int td_json_client_destroy(
    ffi.Pointer<ffi.Void> client,
  ) {
    return _td_json_client_destroy(
      client,
    );
  }

  late final _td_json_client_destroy_ptr =
      _lookup<ffi.NativeFunction<_c_td_json_client_destroy>>(
          'td_json_client_destroy');
  late final _dart_td_json_client_destroy _td_json_client_destroy =
      _td_json_client_destroy_ptr.asFunction<_dart_td_json_client_destroy>();

  /// Returns an opaque identifier of a new TDLib instance.
  /// The TDLib instance will not send updates until the first request is sent to it.
  /// \return Opaque identifier of a new TDLib instance.
  int td_create_client_id() {
    return _td_create_client_id();
  }

  late final _td_create_client_id_ptr =
      _lookup<ffi.NativeFunction<_c_td_create_client_id>>(
          'td_create_client_id');
  late final _dart_td_create_client_id _td_create_client_id =
      _td_create_client_id_ptr.asFunction<_dart_td_create_client_id>();

  /// Sends request to the TDLib client. May be called from any thread.
  /// \param[in] client_id TDLib client identifier.
  /// \param[in] request JSON-serialized null-terminated request to TDLib.
  int td_send(
    int client_id,
    ffi.Pointer<ffi.Int8> request,
  ) {
    return _td_send(
      client_id,
      request,
    );
  }

  late final _td_send_ptr = _lookup<ffi.NativeFunction<_c_td_send>>('td_send');
  late final _dart_td_send _td_send = _td_send_ptr.asFunction<_dart_td_send>();

  /// Receives incoming updates and request responses. Must not be called simultaneously from two different threads.
  /// The returned pointer can be used until the next call to td_receive or td_execute, after which it will be deallocated by TDLib.
  /// \param[in] timeout The maximum number of seconds allowed for this function to wait for new data.
  /// \return JSON-serialized null-terminated incoming update or request response. May be NULL if the timeout expires.
  ffi.Pointer<ffi.Int32> td_receive(
    double timeout,
  ) {
    return _td_receive(
      timeout,
    );
  }

  late final _td_receive_ptr =
      _lookup<ffi.NativeFunction<_c_td_receive>>('td_receive');
  late final _dart_td_receive _td_receive =
      _td_receive_ptr.asFunction<_dart_td_receive>();

  /// Synchronously executes a TDLib request.
  /// A request can be executed synchronously, only if it is documented with "Can be called synchronously".
  /// The returned pointer can be used until the next call to td_receive or td_execute, after which it will be deallocated by TDLib.
  /// \param[in] request JSON-serialized null-terminated request to TDLib.
  /// \return JSON-serialized null-terminated request response.
  ffi.Pointer<ffi.Int32> td_execute(
    ffi.Pointer<ffi.Int8> request,
  ) {
    return _td_execute(
      request,
    );
  }

  late final _td_execute_ptr =
      _lookup<ffi.NativeFunction<_c_td_execute>>('td_execute');
  late final _dart_td_execute _td_execute =
      _td_execute_ptr.asFunction<_dart_td_execute>();

  /// Sets the callback that will be called when a message is added to the internal TDLib log.
  /// None of the TDLib methods can be called from the callback.
  /// By default the callback is not set.
  ///
  /// \param[in] max_verbosity_level Maximum verbosity level of messages for which the callback will be called.
  /// \param[in] callback Callback that will be called when a message is added to the internal TDLib log.
  /// Pass nullptr to remove the callback.
  int td_set_log_message_callback(
    int max_verbosity_level,
    ffi.Pointer<ffi.NativeFunction<td_log_message_callback_ptr>> callback,
  ) {
    return _td_set_log_message_callback(
      max_verbosity_level,
      callback,
    );
  }

  late final _td_set_log_message_callback_ptr =
      _lookup<ffi.NativeFunction<_c_td_set_log_message_callback>>(
          'td_set_log_message_callback');
  late final _dart_td_set_log_message_callback _td_set_log_message_callback =
      _td_set_log_message_callback_ptr
          .asFunction<_dart_td_set_log_message_callback>();

  /// Sets the path to the file where the internal TDLib log will be written.
  /// By default TDLib writes logs to stderr or an OS specific log.
  /// Use this method to write the log to a file instead.
  ///
  /// \deprecated Use synchronous setLogStream request instead.
  /// \param[in]  file_path Null-terminated path to a file where the internal TDLib log will be written.
  /// Use an empty path to switch back to the default logging behaviour.
  /// \return True 1 on success, or 0 otherwise, i.e. if the file can't be opened for writing.
  int td_set_log_file_path(
    ffi.Pointer<ffi.Int8> file_path,
  ) {
    return _td_set_log_file_path(
      file_path,
    );
  }

  late final _td_set_log_file_path_ptr =
      _lookup<ffi.NativeFunction<_c_td_set_log_file_path>>(
          'td_set_log_file_path');
  late final _dart_td_set_log_file_path _td_set_log_file_path =
      _td_set_log_file_path_ptr.asFunction<_dart_td_set_log_file_path>();

  /// Sets the maximum size of the file to where the internal TDLib log is written before the file will be auto-rotated.
  /// Unused if log is not written to a file. Defaults to 10 MB.
  ///
  /// \deprecated Use synchronous setLogStream request instead.
  /// \param[in]  max_file_size The maximum size of the file to where the internal TDLib log is written before the file
  /// will be auto-rotated. Should be positive.
  int td_set_log_max_file_size(
    int max_file_size,
  ) {
    return _td_set_log_max_file_size(
      max_file_size,
    );
  }

  late final _td_set_log_max_file_size_ptr =
      _lookup<ffi.NativeFunction<_c_td_set_log_max_file_size>>(
          'td_set_log_max_file_size');
  late final _dart_td_set_log_max_file_size _td_set_log_max_file_size =
      _td_set_log_max_file_size_ptr
          .asFunction<_dart_td_set_log_max_file_size>();

  /// Sets the verbosity level of the internal logging of TDLib.
  /// By default the TDLib uses a log verbosity level of 5.
  ///
  /// \deprecated Use synchronous setLogVerbosityLevel request instead.
  /// \param[in]  new_verbosity_level New value of logging verbosity level.
  /// Value 0 corresponds to fatal errors,
  /// value 1 corresponds to errors,
  /// value 2 corresponds to warnings and debug warnings,
  /// value 3 corresponds to informational,
  /// value 4 corresponds to debug,
  /// value 5 corresponds to verbose debug,
  /// value greater than 5 and up to 1024 can be used to enable even more logging.
  int td_set_log_verbosity_level(
    int new_verbosity_level,
  ) {
    return _td_set_log_verbosity_level(
      new_verbosity_level,
    );
  }

  late final _td_set_log_verbosity_level_ptr =
      _lookup<ffi.NativeFunction<_c_td_set_log_verbosity_level>>(
          'td_set_log_verbosity_level');
  late final _dart_td_set_log_verbosity_level _td_set_log_verbosity_level =
      _td_set_log_verbosity_level_ptr
          .asFunction<_dart_td_set_log_verbosity_level>();

  /// Sets the callback that will be called when a fatal error happens.
  /// None of the TDLib methods can be called from the callback.
  /// The TDLib will crash as soon as callback returns.
  /// By default the callback is not set.
  ///
  /// \deprecated Use td_set_log_message_callback instead.
  /// \param[in]  callback Callback that will be called when a fatal error happens.
  /// Pass NULL to remove the callback.
  int td_set_log_fatal_error_callback(
    ffi.Pointer<ffi.NativeFunction<td_log_fatal_error_callback_ptr>> callback,
  ) {
    return _td_set_log_fatal_error_callback(
      callback,
    );
  }

  late final _td_set_log_fatal_error_callback_ptr =
      _lookup<ffi.NativeFunction<_c_td_set_log_fatal_error_callback>>(
          'td_set_log_fatal_error_callback');
  late final _dart_td_set_log_fatal_error_callback
      _td_set_log_fatal_error_callback = _td_set_log_fatal_error_callback_ptr
          .asFunction<_dart_td_set_log_fatal_error_callback>();
}

typedef _c_td_json_client_create = ffi.Pointer<ffi.Int32> Function();

typedef _dart_td_json_client_create = ffi.Pointer<ffi.Int32> Function();

typedef _c_td_json_client_send = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> client,
  ffi.Pointer<ffi.Int8> request,
);

typedef _dart_td_json_client_send = int Function(
  ffi.Pointer<ffi.Void> client,
  ffi.Pointer<ffi.Int8> request,
);

typedef _c_td_json_client_receive = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Void> client,
  ffi.Double timeout,
);

typedef _dart_td_json_client_receive = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Void> client,
  double timeout,
);

typedef _c_td_json_client_execute = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Void> client,
  ffi.Pointer<ffi.Int8> request,
);

typedef _dart_td_json_client_execute = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Void> client,
  ffi.Pointer<ffi.Int8> request,
);

typedef _c_td_json_client_destroy = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> client,
);

typedef _dart_td_json_client_destroy = int Function(
  ffi.Pointer<ffi.Void> client,
);

typedef _c_td_create_client_id = ffi.Int32 Function();

typedef _dart_td_create_client_id = int Function();

typedef _c_td_send = ffi.Int32 Function(
  ffi.Int32 client_id,
  ffi.Pointer<ffi.Int8> request,
);

typedef _dart_td_send = int Function(
  int client_id,
  ffi.Pointer<ffi.Int8> request,
);

typedef _c_td_receive = ffi.Pointer<ffi.Int32> Function(
  ffi.Double timeout,
);

typedef _dart_td_receive = ffi.Pointer<ffi.Int32> Function(
  double timeout,
);

typedef _c_td_execute = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int8> request,
);

typedef _dart_td_execute = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int8> request,
);

typedef td_log_message_callback_ptr = ffi.Void Function(
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
);

typedef _c_td_set_log_message_callback = ffi.Int32 Function(
  ffi.Int32 max_verbosity_level,
  ffi.Pointer<ffi.NativeFunction<td_log_message_callback_ptr>> callback,
);

typedef _dart_td_set_log_message_callback = int Function(
  int max_verbosity_level,
  ffi.Pointer<ffi.NativeFunction<td_log_message_callback_ptr>> callback,
);

typedef _c_td_set_log_file_path = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> file_path,
);

typedef _dart_td_set_log_file_path = int Function(
  ffi.Pointer<ffi.Int8> file_path,
);

typedef _c_td_set_log_max_file_size = ffi.Int32 Function(
  ffi.Int64 max_file_size,
);

typedef _dart_td_set_log_max_file_size = int Function(
  int max_file_size,
);

typedef _c_td_set_log_verbosity_level = ffi.Int32 Function(
  ffi.Int32 new_verbosity_level,
);

typedef _dart_td_set_log_verbosity_level = int Function(
  int new_verbosity_level,
);

typedef td_log_fatal_error_callback_ptr = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
);

typedef _c_td_set_log_fatal_error_callback = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<td_log_fatal_error_callback_ptr>> callback,
);

typedef _dart_td_set_log_fatal_error_callback = int Function(
  ffi.Pointer<ffi.NativeFunction<td_log_fatal_error_callback_ptr>> callback,
);
